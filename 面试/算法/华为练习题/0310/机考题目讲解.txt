/**
     * 给定两个字符串str1和str2，如果字符串str1中的字符，经过排列组合后的字符串中，只要有一个字符串是str2的子串，则认为str1是str2的关联子串。
     * 若str1是str2的关联子串，请返回子串在str2的起始位置；
     * 若不是关联子串，则返回-1。
     * 示例1：
     * 输入：str1="abc",str2="efghicabiii"
     * 输出：5
     * 解释：str2包含str1的一种排列组合（"cab")，此组合在str2的字符串起始位置为5（从0开始计数）
     */
    private int getStartIndex(String str1, String str2) {
        if (str1 == null || str2 == null || str1.length() > str2.length()) {
            return -1;
        }
        // l r l r
        // efghicabiii
        int count = str1.length();
        int[] maps = new int[123];
        for (int i = 0; i < str1.length(); i++) {
            maps[str1.charAt(i)]++;
        }
        int leftIndex = 0;
        int rightIndex = 0;
        while (rightIndex < str2.length()) {
            while (rightIndex - leftIndex + 1 <= str1.length()) {
                maps[str2.charAt(rightIndex)]--;
                // 如果该字符匹配str1中的字符
                if (maps[str2.charAt(rightIndex)] >= 0) {
                    count--;
                }
                rightIndex++;
            }
            if (count == 0) {
                break;
            }
            maps[str2.charAt(leftIndex)]++;
            if (maps[str2.charAt(leftIndex)] > 0) {
                count++;
            }
            leftIndex++;
        }
        return count == 0 ? leftIndex : -1;
    }
	
	
	
	
	
	
/**
     * 输入描述:
     * 一个目标整数T (1 <=T<= 1000)
     * 输出描述:
     * 该整数的所有表达式和表达式的个数。如果有多种表达式，输出要求为：
     * 1.自然数个数最少的表达式优先输出
     * 2.每个表达式中按自然数递增的顺序输出，具体的格式参见样例。在每个测试数据结束时，输出一行”Result:X”，其中X是最终的表达式个数。
     * 示例1
     * 输入
     * 9
     * 输出
     * 9=9
     * 9=4+5
     * 9=2+3+4
     * Result:3
     * 新思路：双指针
     * 1 2 3 4 5 6 7 8 9
     */
    private void fun(int num) {
        // 建立一个容纳结果的容器
        List<String> res = new ArrayList<>();
        // 9
        // sum = 1+2+3+4
        // sum = 2+3+4+..
        // sum = 3+4+5+...
        for (int i = 1; i <= num; i++) {
            int sum = 0;
            StringBuilder sb = new StringBuilder().append(num).append("=");
            for (int j = i; sum <= num; j++) {
                sum += j;
                sb.append(j).append("+");
                if (sum == num) {
                    sb.deleteCharAt(sb.length() - 1);
                    res.add(sb.toString());
                    break;
                }
            }
        }
        res.sort(Comparator.comparingInt(String::length));
        for (String str : res) {
            System.out.println(str);
        }
        System.out.println("Result:" + res.size());
    }
	
	
	第三题讲解链接：https://leetcode-cn.com/problems/largest-number/
	
	/**
     * 3、给定一组整数（非负），重排顺序后输出一个最大的整数。
     * 示例 1:
     * 输入: [10,9]
     * 输出: 910 109 910
     * 说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数。
     * 输入描述:
     * 数字组合
     * 输出描述:
     * 最大的整数
     * 示例1
     * 输入
     * 10 9
     * 输出
     * 910
     */
    private String getLargestNumber(int[] nums) {
        if (nums == null || nums.length == 0) {
            return "0";
        }
        String[] strNums = new String[nums.length];
        for (int i = 0; i < nums.length; i++) {
            strNums[i] = String.valueOf(nums[i]);
        }
        Arrays.sort(strNums, (o1, o2) -> {
            // [10,9]
            // 910.compareTo(109)
            // 1 -> [9,10]
            // [1,2,3]
            // [2,1,3]
            // [2,3,1]
            return (o2 + o1).compareTo(o1 + o2);
        });
        StringBuilder sb = new StringBuilder();
        for (String str : strNums) {
            sb.append(str);
        }
        return sb.toString();
    }