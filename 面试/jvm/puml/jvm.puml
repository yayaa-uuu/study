@startmindmap
* JVM
** java代码的执行
***_ 代码编译为class
****_ javac
***_ 装载class
****_ ClassLoad
***_ 执行class
****_ 解释执行
****_ 编译执行
*****_ client compiler
*****_ server compiler
** 内存管理
***_ 内存空间
****_ 方法区
****_ 堆
****_ 虚拟机栈
****_ 本地方法栈
****_ pc程序计数器

***_ 内存分配
****_ 堆上分配
****_ TLAB分配
****_ 栈上分配

***_ 内存回收
****_ 算法
*****_ Copy
*****_ Mark-Sweep
*****_ Mark-Compart

****_ Sun JDK
*****_ 分代回收
******_ 新生代可用的GC
*******_ 串行Copying
*******_ 并行回收Copying
*******_ 并行Copying

******_ Minor GC触发机制以及日志格式
******_ 旧生代可用的GC
*******_ 串行Mark-Sweep-Compart
*******_ 并行Copying
*******_ 并发Mark-Sweep

******_ Full GC触发机制以及日志格式

*****_ GC参数
*****_ G1

***_ 内存情况分析
****_ jconsole
****_ visualvm
****_ jstat
****_ jmap
****_ MAT

** 线程资源同步和交互
***_ 线程资源同步
****_ 线程资源执行机制
****_ 线程资源同步机制
*****_ Synchronized 的实现机制
*****_ lock/unlock 的实现机制

***_ 线程交互机制
****_ Object.wait/notity/notityAll/
****_ 并发包提供的交互机制
*****_ CountDownLatch
*****_ Semaphore

***_ 线程状态及分析方法
****_ jstack
****_ TDA
@endmindmap